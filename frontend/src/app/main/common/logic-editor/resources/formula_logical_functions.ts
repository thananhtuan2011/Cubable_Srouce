import { ILogicalFunction } from '../interfaces';

export const FORMULA_LOGICAL_FUNCTIONS: ILogicalFunction[] = [
	{
		keyword			: 'DATE',
		description		: 'Trả về số tuần tự đại diện cho ngày tháng được chỉ định bằng năm, tháng và ngày.',
		syntax			: 'DATE(year, month, day)',
		argument		: 'Year: Số nguyên đại diện cho năm. Có thể nhập trực tiếp hoặc như một trường. Month: Số nguyên đại diện cho tháng. Có thể nhập trực tiếp hoặc như một trường, Day: Số nguyên đại diện cho ngày. Có thể nhập trực tiếp hoặc như một trường',
		example			: 'DATE(2000,01,01)',
		expectedResult	: '01/01/2000',
	},
	{
		keyword			: 'DATEDIF',
		description		: 'Tính số ngày, số tháng hoặc số năm giữa hai ngày tháng.',
		syntax			: 'DATEDIF(start_date, end_date, unit)',
		argument		: 'Start date: This can be a date field, or an integer or formula field formatted as a date type. End date: This can be a date field, or an integer or formula field formatted as a date type. Unit: An abbreviated string for a unit of time. For example, Y represents the year, M represents the month, and D represents the day.',
		example			: 'DATEDIF("2000-01-01","2000-01-08","D")',
		expectedResult	: '01/01/2000',
	},
	{
		keyword			: 'DAY',
		description		: 'Trả về một số nguyên đại diện cho ngày của tháng cho một ngày tháng được chỉ định.',
		syntax			: 'DAY(date value)',
		argument		: 'Date_value: Ngày tháng mà từ đó ngày cụ thể sẽ được trích xuất.',
		example			: 'DAY("2000-01-03")',
		expectedResult	: '3',
	},
	{
		keyword			: 'DAYS',
		description		: 'Trả về số ngày giữa hai ngày tháng.',
		syntax			: 'DAYS(end_date, start_date)',
		argument		: 'End_date: Có thể là trường ngày tháng hoặc một trường số nguyên/công thức được định dạng kiểu ngày tháng. Start_date: Có thể là trường ngày tháng hoặc một trường số nguyên/công thức được định dạng kiểu ngày tháng.',
		example			: 'DAYS("2000-01-08","2000-01-01")',
		expectedResult	: '7',
	},
	{
		keyword			: 'EOMONTH',
		description		: 'Trả về số tuần tự đại diện cho ngày trong tháng cuối cùng, cách ngày bắt đầu một số tháng được chỉ định.',
		syntax			: 'EOMONTH(start_date, months)',
		argument		: 'Start_date: Ngày bắt đầu để tính toán. Months: Giá trị dương tạo ra ngày trong tương lai; giá trị âm tạo ra ngày trong quá khứ.',
		example			: 'EOMONTH("1/1/11", 2)',
		expectedResult	: '31/03/2011',
	},
	{
		keyword			: 'HOUR',
		description		: 'Trả về một số nguyên đại diện cho giờ của một thời gian được chỉ định.',
		syntax			: 'HOUR(time)',
		argument		: 'Time: Thời gian mà từ đó giờ sẽ được trích xuất',
		example			: 'HOUR("7/18/2011 16:45:00")',
		expectedResult	: '16',
	},
	{
		keyword			: 'MINUTE',
		description		: 'Trả về một số nguyên đại diện cho phút của một thời gian được chỉ định.',
		syntax			: 'MINUTE(time)',
		argument		: 'Time: Thời gian mà từ đó giờ sẽ được trích xuất',
		example			: 'MINUTE("7/18/2011 16:45:00")',
		expectedResult	: '45',
	},
	{
		keyword			: 'MONTH',
		description		: 'Trả về một số nguyên đại diện cho tháng của một ngày tháng được chỉ định.',
		syntax			: 'MONTH(date_value)',
		argument		: 'Date_value: Ngày tháng mà từ đó tháng sẽ được trích xuất.',
		example			: 'MONTH("2000-12-01")',
		expectedResult	: '12',
	},
	{
		keyword			: 'NETWORKDAYS',
		description		: 'Trả về số ngày làm việc giữa hai ngày tháng, không bao gồm cuối tuần và các ngày nghỉ lễ tùy chọn.',
		syntax			: 'NETWORKDAYS(start_date, end_date, [holidays])',
		argument		: 'Start_date: Có thể là trường ngày tháng hoặc một trường số nguyên/công thức được định dạng kiểu ngày tháng. End_date: Có thể là trường ngày tháng hoặc một trường số nguyên/công thức được định dạng kiểu ngày tháng. Holidays (tùy chọn): Theo mặc định là cuối tuần (thứ Bảy và Chủ nhật). Ngoài ra, có thể liệt kê các ngày nghỉ hoặc các trường ngày tháng trong hàm này.',
		example			: 'NETWORKDAYS("2000-01-01","2000-01-12")',
		expectedResult	: '8',
	},
	{
		keyword			: 'NOW',
		description		: 'Trả về ngày và giờ hiện tại dưới dạng một số tuần tự.',
		syntax			: 'NOW()',
		example			: 'NOW()',
		expectedResult	: '14/05/2024',
	},
	{
		keyword			: 'SECOND',
		description		: 'Trả về một số nguyên đại diện cho giây của một thời gian được chỉ định.',
		syntax			: 'SECOND(time)',
		argument		: 'Time: Thời gian mà từ đó giây sẽ được trích xuất.',
		example			: 'SECOND("7/18/2011 16:45:02")',
		expectedResult	: '2',
	},
	{
		keyword			: 'TODAY',
		description		: 'Trả về số tuần tự đại diện cho ngày hiện tại.',
		syntax			: 'TODAY()',
		example			: 'TODAY()',
		expectedResult	: '14/05/2024',
	},
	{
		keyword			: 'WEEKDAY',
		description		: 'Trả về một số nguyên đại diện cho ngày trong tuần cho một ngày tháng được chỉ định.',
		syntax			: 'WEEKDAY(date_value, [return_type])',
		argument		: 'Date_value: Ngày mục tiêu trong tuần cần trả về. Có thể là trường ngày tháng hoặc một trường số nguyên/công thức được định dạng kiểu ngày tháng. Return_type (tùy chọn): Chỉ định ngày bắt đầu tuần là thứ mấy. Nếu là 1, ngày bắt đầu tuần là Chủ nhật; nếu là 2, thì bắt đầu từ thứ Hai. Mặc định là 1.',
		example			: 'WEEKDAY("2000-01-01")',
		expectedResult	: '7',
	},
	{
		keyword			: 'WEEKNUM',
		description		: 'Trả về số tuần của năm cho một ngày tháng được chỉ định.',
		syntax			: 'WEEKNUM(date, [type])',
		argument		: 'Date: Ngày mục tiêu mà từ đó số tuần được trả về. Có thể là trường ngày tháng hoặc một trường số nguyên/công thức được định dạng kiểu ngày tháng. Return_type (tùy chọn): Chỉ định ngày bắt đầu tuần là thứ mấy. Nếu là 1, ngày bắt đầu tuần là Chủ nhật; nếu là 2, thì bắt đầu từ thứ Hai. Mặc định là 1.',
		example			: 'WEEKNUM("2000-01-01")',
		expectedResult	: '1',
	},
	{
		keyword			: 'WORKDAY',
		description		: 'Trả về số tuần tự của ngày kết thúc, dựa trên ngày bắt đầu và số ngày làm việc được chỉ định.',
		syntax			: 'WORKDAY(start_date, days, [holidays])',
		argument		: 'Start_date: Ngày bắt đầu cần cho việc tính toán. Có thể là dưới dạng hàm với kiểu ngày tháng hoặc một trường số nguyên. Days: Số ngày làm việc cần tính từ ngày bắt đầu. Holidays (tùy chọn): Theo mặc định là cuối tuần (thứ Bảy và Chủ nhật), cùng với các dãy ngày hoặc các hằng số mảng được liệt kê trong hàm này.',
		example			: 'WORKDAY("2000/01/01",7)',
		expectedResult	: '11/01/2000',
	},
	{
		keyword			: 'YEAR',
		description		: 'Trả về một số nguyên đại diện cho năm của một ngày tháng được chỉ định.',
		syntax			: 'YEAR(date_value)',
		argument		: 'Date_value: Ngày tháng mà từ đó năm sẽ được trích xuất.',
		example			: 'YEAR("2000-01-01")',
		expectedResult	: '2000',
	},
	{
		keyword			: 'AND',
		description		: 'Trả về TRUE khi tất cả các đối số của nó đều đúng, ngược lại trả về FALSE nếu bất kỳ đối số nào sai.',
		syntax			: 'AND(logical_expression_1, [logical_expression_2, ...])',
		argument		: 'Logical_expression_1: Một biểu thức logic hoặc tham chiếu đến một trường chứa biểu thức, đại diện cho một giá trị logic (TRUE hoặc FALSE). Logical_expression_2, ...: Các biểu thức bổ sung của các giá trị logic.',
		example			: 'AND(TRUE, FALSE, TRUE)',
		expectedResult	: 'FALSE',
	},
	{
		keyword			: 'FALSE',
		description		: 'Trả về giá trị logic FALSE.',
		syntax			: 'FALSE()',
		example			: 'FALSE()',
		expectedResult	: 'FALSE',
	},
	{
		keyword			: 'IF',
		description		: 'Trả về một giá trị nếu điều kiện đánh giá là TRUE và một giá trị khác nếu nó là FALSE.',
		syntax			: 'IF(evaluation_condition, value_if_true, [value_if_false])',
		argument		: 'Evaluation_condition: Điều kiện cần được đánh giá. Bạn có thể nhập trực tiếp một biểu thức logic và cũng có thể tham chiếu đến một trường chứa biểu thức, đại diện cho một giá trị logic (TRUE hoặc FALSE). Value_if_true: Giá trị trả về khi điều kiện đánh giá là TRUE. Value_if_false (tùy chọn): Giá trị trả về khi điều kiện đánh giá là FALSE.',
		example			: 'IF(1==2, "Same", "Different")',
		expectedResult	: 'Different',
	},
	{
		keyword			: 'IFERROR',
		description		: 'Kiểm tra xem giá trị đích có lỗi hay không. Nếu không có lỗi, chính giá trị đó sẽ được trả về; ngược lại, giá trị của đối số thứ hai sẽ được trả về.',
		syntax			: 'IFERROR(value, returned value if error)',
		argument		: 'Value: Giá trị cần được đánh giá và giá trị trả về nếu không có lỗi. Value_if_error: Giá trị trả về nếu có lỗi.',
		example			: 'IFERROR(2/0, "Error")',
		expectedResult	: 'Error',
	},
	{
		keyword			: 'ISERROR',
		description		: 'Kiểm tra xem một giá trị có phải là giá trị lỗi hay không.',
		syntax			: 'ISERROR(value)',
		argument		: 'Value: Giá trị cần được đánh giá.',
		example			: 'ISERROR(A2)',
		expectedResult	: 'FALSE if A2 don’t have error',
	},
	{
		keyword			: 'NOT',
		description		: 'Trả về giá trị ngược lại của giá trị logic được chỉ định.',
		syntax			: 'NOT(logical function)',
		argument		: 'Logical_function: Bất kỳ giá trị hoặc biểu thức nào trả về giá trị TRUE hoặc FALSE.',
		example			: 'NOT(TRUE)',
		expectedResult	: 'FALSE',
	},
	{
		keyword			: 'OR',
		description		: 'Trả về TRUE khi bất kỳ đối số nào được chỉ định là đúng; trả về FALSE khi tất cả các đối số đều sai.',
		syntax			: 'OR(logical expression 1, [logical expression 2, ...])',
		argument		: 'Logical_expression_1: Một biểu thức hoặc tham chiếu đến một ô chứa biểu thức. Biểu thức này đại diện cho một giá trị logic (TRUE hoặc FALSE) hoặc có thể được ép kiểu thành giá trị logic. Logical_expression_2, ...: Các biểu thức bổ sung mà kết quả tính toán của chúng là một giá trị logic.',
		example			: 'OR(1==2, 1==1)',
		expectedResult	: 'TRUE',
	},
	{
		keyword			: 'SWITCH',
		description		: 'So sánh một biểu thức với các biểu thức khác, trả về các giá trị được chỉ định dựa trên các điều kiện khớp.',
		syntax			: 'SWITCH(expression, expression 1, value for expression 1, [expression 2 or default value, ...], [value for expression 2, ...])',
		argument		: 'Expression: Biểu thức để đánh giá so với các điều kiện. Đây có thể là một trường trong cơ sở dữ liệu. Expression_1: Tình huống đầu tiên cần so sánh với biểu thức. Value_if_expression_1: Kết quả trả về nếu biểu thức 1 khớp. Expression_2_or_default, ...: Các biểu thức khác để đánh giá khi biểu thức trước đó không khớp hoặc giá trị mặc định trả về khi không có điều kiện nào khớp. Value_if_expression_2, ...: Kết quả trả về nếu biểu thức 2 hoặc các biểu thức tiếp theo khớp.',
		example			: 'SWITCH(7, 9, "Nine", 7, "Seven")',
		expectedResult	: 'Seven',
	},
	{
		keyword			: 'TRUE',
		description		: 'Trả về giá trị logic TRUE.',
		syntax			: 'TRUE()',
		example			: 'TRUE()',
		expectedResult	: 'TRUE',
	},
	{
		keyword			: 'CHAR',
		description		: 'Trả về ký tự Unicode tương ứng với mã số nguyên.',
		syntax			: 'CHAR(integer)',
		argument		: 'Integer: Số nguyên cần được chuyển đổi thành Unicode.',
		example			: 'CHAR(65)',
		expectedResult	: 'A',
	},
	{
		keyword			: 'CONCATENATE',
		description		: 'Nối nhiều chuỗi ký tự lại với nhau.',
		syntax			: 'CONCATENATE(character string 1, [character string 2, ...])',
		argument		: 'Character_string_1: Chuỗi ký tự ban đầu. Character_string_2, ...: Các chuỗi ký tự khác cần được nối vào.',
		example			: 'CONCATENATE("Ba", "se")',
		expectedResult	: 'Base',
	},
	{
		keyword			: 'FIND',
		description		: 'Tìm giá trị được chỉ định bắt đầu từ vị trí được chỉ định và trả về vị trí nơi nó xuất hiện đầu tiên; nếu giá trị không tồn tại, trả về -1.',
		syntax			: 'FIND(find value, find range, [start position])',
		argument		: 'Find_value: Giá trị cần tìm, phân biệt chữ hoa chữ thường. Find_range: Phạm vi cần tìm kiếm. Có thể là một giá trị, một mảng dữ liệu hoặc một trường trong bảng. Start_position (tùy chọn): Vị trí để bắt đầu tìm kiếm. Mặc định bắt đầu từ 1.',
		example			: 'FIND("a", "Base")',
		expectedResult	: '2',
	},
	{
		keyword			: 'LEFT',
		description		: 'Trả về một chuỗi con được trích xuất từ đầu của chuỗi ký tự đã chỉ định.',
		syntax			: 'LEFT(character string, [number of characters])',
		argument		: 'Character_string: Chuỗi ký tự mà phần bên trái sẽ được trả về. Number_of_characters ( tùy chọn ): Số ký tự sẽ được trả về từ phía bên trái của chuỗi ký tự.',
		example			: 'LEFT("Base", 2)',
		expectedResult	: 'Ba',
	},
	{
		keyword			: 'LEN',
		description		: 'Trả về độ dài của chuỗi ký tự đã chỉ định.',
		syntax			: 'LEN(text)',
		argument		: 'text: Chuỗi ký tự mà độ dài của nó sẽ được trả về.',
		example			: 'LEN("Base")',
		expectedResult	: '4',
	},
	{
		keyword			: 'LOWER',
		description		: 'Chuyển đổi các chữ cái trong chuỗi ký tự thành chữ thường.',
		syntax			: 'LOWER(text)',
		argument		: 'Text: Chuỗi ký tự sẽ được chuyển đổi thành chữ thường.',
		example			: 'LOWER("ABC")',
		expectedResult	: 'abc',
	},
	{
		keyword			: 'MID',
		description		: 'Trả về số ký tự được chỉ định bắt đầu từ vị trí được chỉ định trong chuỗi ký tự.',
		syntax			: 'MID(character string, start position, length to extract)',
		argument		: 'Character_string: Chuỗi ký tự mà từ đó các ký tự sẽ được trích xuất. Start_position: Vị trí trong chuỗi ký tự để bắt đầu trích xuất. Chỉ số của ký tự đầu tiên là 1. Length_to_extract: Độ dài của các ký tự sẽ được trích xuất.',
		example			: 'MID("Base", 1, 2)',
		expectedResult	: 'Ba',
	},
	{
		keyword			: 'REPLACE',
		description		: 'Thay thế một phần của chuỗi ký tự bằng một chuỗi ký tự khác.',
		syntax			: 'REPLACE(text, position, length, new text)',
		argument		: 'Text: Văn bản mà một phần của nó sẽ được thay thế. Position: Vị trí bắt đầu ( chỉ số bắt đầu là 1 ). Length: Số ký tự sẽ được thay thế trong văn bản. New_text: Văn bản sẽ được chèn vào văn bản gốc.',
		example			: 'REPLACE("abcdefghijk", 6, 5, "*")',
		expectedResult	: 'abcde*k',
	},
	{
		keyword			: 'RIGHT',
		description		: 'Trả về một chuỗi con được trích xuất từ cuối của chuỗi ký tự đã chỉ định.',
		syntax			: 'RIGHT(character string, [number of characters])',
		argument		: 'Character_string: Chuỗi ký tự mà phần bên phải sẽ được trả về. Number_of_characters ( tùy chọn ): Số ký tự sẽ được trả về từ phía bên phải của chuỗi ký tự.',
		example			: 'RIGHT("Base", 2)',
		expectedResult	: 'se',
	},
	{
		keyword			: 'SUBSTITUTE',
		description		: 'Thay thế văn bản cũ bằng văn bản mới.',
		syntax			: 'SUBSTITUTE(text to search, search for, replace with, [occurence number])',
		argument		: 'Text to search: The text in which a part will be replaced. Search for: The text to be replaced. Replace with: The new text to replace the previous argument.',
		example			: 'SUBSTITUTE("abcdefg", "cde", "xyz", 1)',
		expectedResult	: 'abxyzfg',
	},
	{
		keyword			: 'SPLIT',
		description		: 'Tách văn bản bằng một dấu phân tách.',
		syntax			: 'SPLIT(text, separator)',
		argument		: 'Text: Văn bản cần tách. Separator: Một ký tự đơn hoặc một chuỗi ký tự được sử dụng để tách văn bản.',
		example			: 'SPLIT("a--c", "--")',
		expectedResult	: 'a,c',
	},
	{
		keyword			: 'TRIM',
		description		: 'Xóa các khoảng trắng ở đầu, cuối và các khoảng trắng lặp lại trong văn bản.',
		syntax			: 'TRIM(text)',
		argument		: 'Text: Văn bản mà từ đó các khoảng trắng sẽ được xóa, hoặc tham chiếu đến một ô chứa văn bản.',
		example			: 'TRIM(" abc abc ")',
		expectedResult	: 'abc abc',
	},
	{
		keyword			: 'UPPER',
		description		: 'Chuyển đổi các chữ cái trong chuỗi ký tự thành chữ hoa.',
		syntax			: 'UPPER(text)',
		argument		: 'Text: Chuỗi ký tự sẽ được chuyển đổi thành chữ hoa.',
		example			: 'UPPER("abc")',
		expectedResult	: 'ABC',
	},
	{
		keyword			: 'ABS',
		description		: 'Trả về giá trị tuyệt đối cho một giá trị số.',
		syntax			: 'ABS(numerical value)',
		argument		: 'Numerical_value: Giá trị số mà giá trị tuyệt đối của nó sẽ được trả về.',
		example			: 'ABS(-2)',
		expectedResult	: '-2',
	},
	{
		keyword			: 'ACOS',
		description		: 'Trả về cung cosin của một giá trị theo radian.',
		syntax			: 'ACOS(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ACOS(-0.5)*180/PI()',
		expectedResult	: '120',
	},
	{
		keyword			: 'ACOSH',
		description		: 'Trả về cosin hyperbolic nghịch đảo của một giá trị.',
		syntax			: 'ACOSH(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ACOSH(1)',
		expectedResult	: '0',
	},
	{
		keyword			: 'ASIN',
		description		: 'Trả về cung sin của một giá trị theo radian.',
		syntax			: 'ASIN(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ASIN(-0.5)*180/PI()',
		expectedResult	: '-30.000000000000004',
	},
	{
		keyword			: 'ASINH',
		description		: 'Trả về sin hyperbolic nghịch đảo của một giá trị theo radian.',
		syntax			: 'ASINH(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ASINH(10)',
		expectedResult	: '2.99822295029797',
	},
	{
		keyword			: 'ATAN',
		description		: 'Trả về cung tang của một giá trị theo radian.',
		syntax			: 'ATAN(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ATAN(1)*180/PI()',
		expectedResult	: '45',
	},
	{
		keyword			: 'ATAN2',
		description		: 'Trả về cung tang của thương số của tọa độ X và Y.',
		syntax			: 'ATAN2(X-coordinate value, Y-coordinate value)',
		argument		: 'X_coordinate_value: Giá trị số cần được tính toán. Y_coordinate_value: Giá trị số cần được tính toán.',
		example			: 'ATAN2(-1, -1)*180/PI()',
		expectedResult	: '-135',
	},
	{
		keyword			: 'ATANH',
		description		: 'Trả về tang hyperbolic nghịch đảo của một giá trị.',
		syntax			: 'ATANH(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ATANH(0.76159416)',
		expectedResult	: '1.0000000096297197',
	},
	{
		keyword			: 'AVERAGE',
		description		: 'Trả về giá trị trung bình cộng của một mảng.',
		syntax			: 'AVERAGE(value 1, [value 2, ...])',
		argument		: 'Value_1: Giá trị số hoặc trường đầu tiên để tính trung bình. Value_2, ...: Các giá trị số hoặc trường khác để tính trung bình.',
		example			: 'AVERAGE(2, 100)',
		expectedResult	: '51',
	},
	{
		keyword			: 'COS',
		description		: 'Trả về cosin của một góc theo radian.',
		syntax			: 'COS(angle)',
		argument		: 'Angle: Góc cần tính cosin theo radian.',
		example			: 'COS(60*PI()/180)',
		expectedResult	: '0.5000000000000001',
	},
	{
		keyword			: 'COSH',
		description		: 'Trả về cosin hyperbolic của một giá trị.',
		syntax			: 'COSH(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'COSH(4)',
		expectedResult	: '27.308232836016487',
	},
	{
		keyword			: 'COUNTA',
		description		: 'Đếm số lượng ô không trống trong một tập dữ liệu.',
		syntax			: 'COUNTA(value 1, [value 2, ...]',
		argument		: 'Value_1: Giá trị đầu tiên hoặc trường tham chiếu cần đếm. Value_2, ...: Các giá trị hoặc trường tham chiếu khác cần đếm.',
		example			: 'COUNTA([1, null, 3, "a", "", "c"])',
		expectedResult	: '4',
	},
	{
		keyword			: 'INT',
		description		: 'Trả về phần số nguyên của một số bằng cách làm tròn xuống đến số nguyên gần nhất.',
		syntax			: 'INT(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'INT(8.9)',
		expectedResult	: '8',
	},
	{
		keyword			: 'ISODD',
		description		: 'Đánh giá xem một số có phải là số lẻ hay không, kết quả là "true" nếu đúng và "false" nếu không phải.',
		syntax			: 'ISODD(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'ISODD(1)',
		expectedResult	: 'TRUE',
	},
	{
		keyword			: 'MAX',
		description		: 'Trả về giá trị lớn nhất trong một mảng số.',
		syntax			: 'MAX(value 1, [value 2, ...])',
		argument		: 'Value_1: Giá trị hoặc trường tham chiếu đầu tiên để tính giá trị lớn nhất. Value_2, ...: Các giá trị hoặc trường tham chiếu khác để tính giá trị lớn nhất.',
		example			: 'MAX(2, 100)',
		expectedResult	: '100',
	},
	{
		keyword			: 'MIN',
		description		: 'Trả về giá trị nhỏ nhất trong một mảng số.',
		syntax			: 'MAX(value 1, [value 2, ...])',
		argument		: 'Value_1: Giá trị hoặc trường tham chiếu đầu tiên để tính giá trị nhỏ nhất. Value_2, ...: Các giá trị hoặc trường tham chiếu khác để tính giá trị nhỏ nhất.',
		example			: 'MIN(2, 100)',
		expectedResult	: '2',
	},
	{
		keyword			: 'MOD',
		description		: 'Trả về phần dư của phép chia.',
		syntax			: 'MOD(dividend, divisor)',
		argument		: 'Dividend: Giá trị số đang bị chia. Divisor: Giá trị số chia số bị chia.',
		example			: 'MOD(3, 2)',
		expectedResult	: '1',
	},
	{
		keyword			: 'PI',
		description		: 'Trả về hằng số toán học pi, chính xác đến 15 chữ số.',
		syntax			: 'PI()',
		example			: 'PI()',
		expectedResult	: '3.141592653589793',
	},
	{
		keyword			: 'POWER',
		description		: 'Trả về một số mũ với lũy thừa được chỉ định.',
		syntax			: 'POWER(base number, exponent)',
		argument		: 'Base_number: Giá trị số áp dụng lũy thừa, có thể là bất kỳ số thực nào. Exponent: Số mũ áp dụng cho số cơ số.',
		example			: 'POWER(5,2)',
		expectedResult	: '25',
	},
	{
		keyword			: 'QUOTIENT',
		description		: 'Trả về phần nguyên của kết quả phép chia, loại bỏ phần dư.',
		syntax			: 'QUOTIENT(dividend, divisor)',
		argument		: 'Dividend: Giá trị số đang bị chia. Divisor: Giá trị số chia số bị chia.',
		example			: 'QUOTIENT(5, 2)',
		expectedResult	: '2',
	},
	{
		keyword			: 'ROUND',
		description		: 'Làm tròn một giá trị số đến số chữ số được chỉ định hoặc ít hơn.',
		syntax			: 'ROUND(numerical value, number of digits)',
		argument		: 'Numerical_value: Giá trị cần làm tròn. Number_of_digits: Số chữ số cần làm tròn. 1 đại diện cho vị trí đầu tiên sau dấu thập phân; 0 đại diện cho số nguyên; và -1 đại diện cho vị trí đầu tiên trước dấu thập phân.',
		example			: 'ROUND(99.44, 1)',
		expectedResult	: '99.4',
	},
	{
		keyword			: 'ROUNDDOWN',
		description		: 'Làm tròn một giá trị số đến số chữ số được chỉ định, làm tròn xuống về phía 0.',
		syntax			: 'ROUNDDOWN(numerical value, number of digits)',
		argument		: 'Numerical_value: Giá trị cần làm tròn. Number_of_digits: Đại diện cho số chữ số cần làm tròn. 1 đại diện cho vị trí đầu tiên sau dấu thập phân; 0 đại diện cho số nguyên; và -1 đại diện cho vị trí đầu tiên trước dấu thập phân.',
		example			: 'ROUNDDOWN(99.44, 1)',
		expectedResult	: '99.4',
	},
	{
		keyword			: 'ROUNDUP',
		description		: 'Làm tròn một giá trị số đến số chữ số được chỉ định, làm tròn lên ra xa 0.',
		syntax			: 'ROUNDUP(numerical value, number of digits)',
		argument		: 'Numerical_value: Giá trị số cần làm tròn. Number_of_digits: Đại diện cho số chữ số cần làm tròn. 1 đại diện cho vị trí đầu tiên sau dấu thập phân; 0 đại diện cho số nguyên; và -1 đại diện cho vị trí đầu tiên trước dấu thập phân.',
		example			: 'ROUNDUP(99.45, 1)',
		expectedResult	: '99.5',
	},
	{
		keyword			: 'SIN',
		description		: 'Trả về sin của một góc theo radian.',
		syntax			: 'SIN(angle)',
		argument		: 'Angle: Góc cần tính sin theo radian.',
		example			: 'SIN(1)',
		expectedResult	: '0.8414709848078965',
	},
	{
		keyword			: 'SINH',
		description		: 'Trả về sin hyperbolic của một giá trị.',
		syntax			: 'SINH(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: '2.868*SINH(0.0342*1.03)',
		expectedResult	: '0.10104906311828732',
	},
	{
		keyword			: 'SUM',
		description		: 'Trả về tổng của tất cả các giá trị số trong một mảng.',
		syntax			: 'SUM(value 1, [value 2, ...])',
		argument		: 'Value_1: Giá trị số hoặc danh sách tham chiếu đầu tiên. Value_2, ...: Các giá trị số hoặc danh sách tham chiếu khác.',
		example			: 'SUM(1, 2)',
		expectedResult	: '3',
	},
	{
		keyword			: 'SUMIF',
		description		: 'Trả về tổng của các giá trị thỏa mãn tiêu chí được chỉ định trong một phạm vi.',
		syntax			: 'SUMIF(data range, evaluation condition)',
		argument		: 'Data_range: Trường hoặc mảng mục tiêu để tính tổng, ở định dạng [Bảng mục tiêu].[trường mục tiêu]. Evaluation_condition: Điều kiện để đánh giá dữ liệu trong phạm vi mục tiêu.',
		example			: 'SUMIF([2,4,8,16], ">5")',
		expectedResult	: '24',
	},
	{
		keyword			: 'TAN',
		description		: 'Trả về tang của một góc theo radian.',
		syntax			: 'TAN(angle)',
		argument		: 'Angle: Góc cần tính tang theo radian.',
		example			: 'TAN(45*PI()/180)',
		expectedResult	: '1',
	},
	{
		keyword			: 'TANH',
		description		: 'Trả về tang hyperbolic của một giá trị.',
		syntax			: 'TANH(numerical value)',
		argument		: 'Numerical_value: Giá trị số cần được tính toán.',
		example			: 'TANH(0)',
		expectedResult	: '0',
	},
	{
		keyword			: 'VALUE',
		description		: 'Chuyển đổi một chuỗi văn bản biểu diễn một số nguyên (chẳng hạn như định dạng tiền tệ, ngày tháng hoặc thời gian) thành một số nguyên.',
		syntax			: 'VALUE(text)',
		argument		: 'Text: Văn bản cần được chuyển đổi thành số nguyên.',
		example			: 'VALUE("$50")',
		expectedResult	: '50',
	},
];
